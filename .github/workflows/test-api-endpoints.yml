name: Test API endpoints

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main

jobs:
  job_test:
    runs-on: ubuntu-latest

    steps:
    - name: Clone repository
      uses: actions/checkout@v2

    - name: Install node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16.x'

    - name: Install dependencies
      run: npm install

    - name: Install dependencies for Puppeteer
      run: |
        apt-get update
        apt-get install -y \
          wget \
          ca-certificates \
          fonts-liberation \
          libappindicator3-1 \
          libasound2 \
          libatk-bridge2.0-0 \
          libatk1.0-0 \
          libcups2 \
          libdbus-1-3 \
          libdrm2 \
          libgbm1 \
          libgtk-3-0 \
          libnspr4 \
          libnss3 \
          libxcomposite1 \
          libxdamage1 \
          libxrandr2 \
          xdg-utils \
          --no-install-recommends \
        apt-get clean
        rm -rf /var/lib/apt/lists/*

    - name: Start server
      run: npm start &

    - name: Install jq
      run: sudo apt-get install -y jq
    
    - name: Run API tests
      run: |
        set +e

        echo -e "Check jq version: $(jq --version) \n"

        successful=0
        failed=0

        echo -e "Search by Title \n"

        echo "RuTracker:"

        ### Check Response Time
        startTime=$(date +%s%3N)
        response=$(curl --write-out "%{http_code}" --silent --output /tmp/response.json http://localhost:8443/api/search/title/rutracker?query=the+rookie 2>/dev/null)
        endTime=$(date +%s%3N)
        responseTime=$((endTime - startTime))
        echo "Response time (ms): $responseTime"
        
        ### Check Response Code
        if [ $response -eq 200 ]; then
          echo "Status code: $response"
          successful=$((successful+1))
        else
          echo "Status code: $response"
          failed=$((failed+1))
        fi

        ### Check Data
        data=$(jq -r '.[0].Name // empty' /tmp/response.json 2>/dev/null)
        if [ -n "$data" ]; then
          echo -e "Check data: true \n"
          successful=$((successful+1))
        else
          echo -e "Check data: false \n"
          failed=$((failed+1))
        fi

        echo "Kinozal:"

        startTime=$(date +%s%3N)
        response=$(curl --write-out "%{http_code}" --silent --output /tmp/response.json http://localhost:8443/api/search/title/kinozal?query=the+rookie 2>/dev/null)
        endTime=$(date +%s%3N)
        responseTime=$((endTime - startTime))
        echo "Response time (ms): $responseTime"
        
        if [ $response -eq 200 ]; then
          echo "Status code: $response"
          successful=$((successful+1))
        else
          echo "Status code: $response"
          failed=$((failed+1))
        fi

        data=$(jq -r '.[0].Name // empty' /tmp/response.json 2>/dev/null)
        if [ -n "$data" ]; then
          echo -e "Check data: true \n"
          successful=$((successful+1))
        else
          echo -e "Check data: false \n"
          failed=$((failed+1))
        fi

        echo "RuTor:"

        startTime=$(date +%s%3N)
        response=$(curl --write-out "%{http_code}" --silent --output /tmp/response.json http://localhost:8443/api/search/title/rutor?query=the+rookie 2>/dev/null)
        endTime=$(date +%s%3N)
        responseTime=$((endTime - startTime))
        echo "Response time (ms): $responseTime"
        
        if [ $response -eq 200 ]; then
          echo "Status code: $response"
          successful=$((successful+1))
        else
          echo "Status code: $response"
          failed=$((failed+1))
        fi

        data=$(jq -r '.[0].Name // empty' /tmp/response.json 2>/dev/null)
        if [ -n "$data" ]; then
          echo -e "Check data: true \n"
          successful=$((successful+1))
        else
          echo -e "Check data: false \n"
          failed=$((failed+1))
        fi

        echo "NoNameClub:"

        startTime=$(date +%s%3N)
        response=$(curl --write-out "%{http_code}" --silent --output /tmp/response.json http://localhost:8443/api/search/title/nonameclub?query=the+rookie 2>/dev/null)
        endTime=$(date +%s%3N)
        responseTime=$((endTime - startTime))
        echo "Response time (ms): $responseTime"
        
        if [ $response -eq 200 ]; then
          echo "Status code: $response"
          successful=$((successful+1))
        else
          echo "Status code: $response"
          failed=$((failed+1))
        fi

        data=$(jq -r '.[0].Name // empty' /tmp/response.json 2>/dev/null)
        if [ -n "$data" ]; then
          echo -e "Check data: true \n"
          successful=$((successful+1))
        else
          echo -e "Check data: false \n"
          failed=$((failed+1))
        fi

        echo -e "Search by ID \n"

        echo "RuTracker:"
         
        startTime=$(date +%s%3N)
        response=$(curl --write-out "%{http_code}" --silent --output /tmp/response.json http://localhost:8443/api/search/id/rutracker?query=6489937 2>/dev/null)
        endTime=$(date +%s%3N)
        responseTime=$((endTime - startTime))
        echo "Response time (ms): $responseTime"
        
        if [ $response -eq 200 ]; then
          echo "Status code: $response"
          successful=$((successful+1))
        else
          echo "Status code: $response"
          failed=$((failed+1))
        fi

        data=$(jq -r '.[0].Name // empty' /tmp/response.json 2>/dev/null)
        if [ -n "$data" ]; then
          echo -e "Check data: true \n"
          successful=$((successful+1))
        else
          echo -e "Check data: false \n"
          failed=$((failed+1))
        fi

        echo "Kinozal:"

        startTime=$(date +%s%3N)
        response=$(curl --write-out "%{http_code}" --silent --output /tmp/response.json http://localhost:8443/api/search/id/kinozal?query=2022944 2>/dev/null)
        endTime=$(date +%s%3N)
        responseTime=$((endTime - startTime))
        echo "Response time (ms): $responseTime"
        
        if [ $response -eq 200 ]; then
          echo "Status code: $response"
          successful=$((successful+1))
        else
          echo "Status code: $response"
          failed=$((failed+1))
        fi

        data=$(jq -r '.[0].Name // empty' /tmp/response.json 2>/dev/null)
        if [ -n "$data" ]; then
          echo -e "Check data: true \n"
          successful=$((successful+1))
        else
          echo -e "Check data: false \n"
          failed=$((failed+1))
        fi

        echo "RuTor:"

        startTime=$(date +%s%3N)
        response=$(curl --write-out "%{http_code}" --silent --output /tmp/response.json http://localhost:8443/api/search/id/rutor?query=970650 2>/dev/null)
        endTime=$(date +%s%3N)
        responseTime=$((endTime - startTime))
        echo "Response time (ms): $responseTime"
        
        if [ $response -eq 200 ]; then
          echo "Status code: $response"
          successful=$((successful+1))
        else
          echo "Status code: $response"
          failed=$((failed+1))
        fi

        data=$(jq -r '.[0].Name // empty' /tmp/response.json 2>/dev/null)
        if [ -n "$data" ]; then
          echo -e "Check data: true \n"
          successful=$((successful+1))
        else
          echo -e "Check data: false \n"
          failed=$((failed+1))
        fi

        echo "NoNameClub:"

        startTime=$(date +%s%3N)
        response=$(curl --write-out "%{http_code}" --silent --output /tmp/response.json http://localhost:8443/api/search/id/nonameclub?query=1259608 2>/dev/null)
        endTime=$(date +%s%3N)
        responseTime=$((endTime - startTime))
        echo "Response time (ms): $responseTime"
        
        if [ $response -eq 200 ]; then
          echo "Status code: $response"
          successful=$((successful+1))
        else
          echo "Status code: $response"
          failed=$((failed+1))
        fi

        data=$(jq -r '.[0].Name // empty' /tmp/response.json 2>/dev/null)
        if [ -n "$data" ]; then
          echo -e "Check data: true \n"
          successful=$((successful+1))
        else
          echo -e "Check data: false \n"
          failed=$((failed+1))
        fi

        echo "Number successful tests: $successful"
        echo "Number failed tests: $failed"

        # if [ $failed -ne 0 ]; then
        #   exit 1
        # fi